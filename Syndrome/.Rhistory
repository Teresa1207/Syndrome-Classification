stat_function(aes(color = "FAQ"),linetype='dashed',fun = FAQt4)+theme(legend.title=element_blank())
#dev.off()
ggplot(ddtran1[!is.na(ddtran1$ADASQ),],aes(x =AGET, y = ADASQ,group = RID,color = ddDx))+geom_line()+stat_summary(aes(y=fitted(At)), fun.y=mean, geom="line")
ggplot(ddtran1[!is.na(ddtran1$FDGQ),],aes(x =time, y = FDGQ,group = RID,color = ddDx))+geom_line()+stat_summary(aes(y=fitted(Ft)), fun.y=mean, geom="line")
#ggpairs(ddtran1[,c("ADASQ",'FAQQ')])
dd4$Group = ifelse(dd4$ddDx%in%c("MCI",'MCI-AD'),'MCI',ifelse(dd4$ddDx%in%c("AD"),'AD','NL'))
ggplot(ddtran1, aes(x = time,y=FDGQ,group=RID))+geom_line()+geom_smooth(aes(group=1))
ggplot(dd4,aes(x = AGET,y=ADASQ,group=RID))+geom_line()#geom_smooth(aes(group=ddDx))+
ggplot(dd4, aes(x = AGET,y=ADASQ,group=RID,color=Group))+geom_line()
ggplot(dd4, aes(x = AGET,y=ADASQ,group=RID,color=ddDx))+geom_line()#geom_smooth(aes(group=ddDx))+
#geom_smooth(aes(group=ddDx))+
ggplot(subset(dd4,Group=="MCI"), aes(x = AGET,y=FDGQ,group=RID))+geom_line()#geom_smooth(aes(group=ddDx))+
ggplot(subset(dd4,Group=="MCI"), aes(x = AGET,y=FDGQ,group=RID,color=factor(RID)))+geom_line()+
geom_line(aes(x = AGET,y = ADASQ))#geom_smooth(aes(group=ddDx))+
sampRID = sample(subset(dd4,Group=="MCI"&!is.na(FDGQ))$RID,size = 5)
ggplot(subset(dd4,RID%in%sampRID), aes(x = AGET,y=FDGQ,group=RID))+geom_line(color = 'red')+
geom_line(aes(x = AGET,y = ADASQ),color = 'green')+facet_grid(~RID)#geom_smooth(aes(group=ddDx))+
#all
ggplot(subset(dd4,AGET>65), aes(x = AGET,y=ADASQ,group=RID,color=ddDx))+geom_line()+xlab('Age at Visit')+ylab('ADAS Severity')+ggtitle(label = 'All Participants')
ggplot(subset(dd4,AGET>65), aes(x = AGET,y=FDGQ,group=RID,color=ddDx))+geom_line()+xlab('Age at Visit')+ylab('FDG Severity')+ggtitle(label = 'All Participants')
dev.off()
ggplot(subset(dd4,AGET>65), aes(x = AGET,y=FDGQ,group=RID,color=ddDx))+geom_line()+xlab('Age at Visit')+ylab('FDG Severity')+ggtitle(label = 'All Participants')
library(plot3D)
scatter3D(x = fdgad$ADASQ,y = fdgad$FDGQ,z = fdgad$AGET)
library(plyr)
n=length(unique(dd4$RID))
#BMat = matrix(0,nrow = n,ncol = 2)
##BMat = data.frame(BMat)
#colnames(BMat) = c("B0","B1",'C0',"C1")
ddSplit = split(dd4,dd4$RID)
ddSplitH = split(hippQm,hippQm$RID)
setwd("~/Documents/Dissertation/R_Dissertation/Syndrome")
dApril = read.csv("alldata_go2_20160419.csv",header=T)
setwd('~/Documents/Davis2015-2016/ADNIDanielle/Data/DataApril')
dApril = read.csv("alldata_go2_20160419.csv",header=T)
nlids=with(dApril, unique(RID[base3dx=='1:Normal']))
mciids=with(dApril, unique(RID[base3dx=='2:MCI']))
adids=with(dApril, unique(RID[base3dx=='3:AD']))
`%ni%` <- Negate(`%in%`)
View(dApril)
setwd("~/Documents/Dissertation/R_Dissertation/Syndrome")
dc = dApril[,c('RID','viscode2','base3dx',"fs51date",'qcvar',"lag_fs51",'hoc','hoc0',"hpcv","etrv","etrt","ventricles","wbrain",
"wmhdate","lag_wmh","WHITMATHYP","fmridate","lag_fmri","PDMNRV","asldate","lag_asl","precuneus_asl","postcing_asl",
"dtidate","lag_dti","cing_hipp_dti","bsi3dt","lag_bsi","kmndbcbbsi3","vbsi3","hbsi3", "tbmdate","lag_tbm",
"TBMSYNSCOR","fdgdate","lag_fdg","rall","av45date","lag_av45","suvr","lag_adas","TOTAL13","lag_mmse","MMSCORE","lag_ravlt","RAVLTtotal","lag_cdr","cdrsum","lag_ecogpt","ecog_score",
"lag_ecogsp","specog_score")]
mrivar1 = c('RID','viscode2','base3dx',"fs51date",'qcvar',"lag_fs51",'hoc',"hpcv","etrv","etrt","ventricles","wbrain")
mrivar2 = c('RID','viscode2','base3dx',"wmhdate",'qcvar',"lag_wmh","WHITMATHYP")
mrivar3 = c('RID','viscode2','base3dx',"bsi3dt","lag_bsi","kmndbcbbsi3","vbsi3","hbsi3")
mrivar4 = c('RID','viscode2','base3dx',"tbmdate","lag_tbm",
"TBMSYNSCOR")
fmrivar = c('RID','viscode2','base3dx',"lag_fmri","PDMNRV")
dtivar = c('RID','viscode2','base3dx',"dtidate","lag_dti","cing_hipp_dti")
aslvar = c('RID','viscode2','base3dx',"asldate","lag_asl","precuneus_asl","postcing_asl")
fdgvar =c('RID','viscode2','base3dx',"lag_fdg","rall")
av45var = c('RID','viscode2','base3dx',"av45date","lag_av45","suvr")
cogvar = c('RID','viscode2','base3dx',"lag_adas","lag_mmse","lag_ravlt","lag_cdr","lag_ecogpt","lag_ecogsp",
"TOTAL13","MMSCORE","RAVLTtotal","cdrsum","ecog_score","specog_score")
types = list(mrivar1,mrivar2,mrivar3,mrivar4,fmrivar,dtivar,aslvar,fdgvar,av45var,cogvar)
databreak = sapply(types,function(x){
aim1[,x]
})
databreak = sapply(types,function(x){
dc[,x]
})
View(databreak[1])
range(dc$hoc,na.rm = T)
hoc = databreak[1]
hoc = data.frame(databreak[1])
View(hoc)
hoc = hoc[!is.na(hoc$hoc),]
View(hoc)
hoc.w = data.frame(wtd.Ecdf(hoc$hoc,weights=hoc$base3dx))
?wtd.Ecdf
xtabs(hoc$base3dx)
xtabs(~hoc$base3dx)
mytab <- function(...) table(..., useNA='ifany')
mytab(hoc$base3dx)
mytab(hoc$base3dx)[1]
sum(mytab(hoc$base3dx))
a = xtabs(~hoc$base3dx)
a[1]
hocDx = xtabs(~hoc$base3dx)
hoc$weight = ifelse(hoc$base3dx=='1:Normal',hocDx[1],ifelse(hoc$base3dx=='2:MCI',hocDx[2],hocDx[3]))
View(hoc)
hoc$weight = ifelse(hoc$base3dx=='1:Normal',hocDx[1],ifelse(hoc$base3dx=='2:MCI',hocDx[2],hocDx[3]))/nrow(hoc)
View(hoc)
xtabs(~hoc$weight)
hoc$weight = ifelse(hoc$base3dx=='1:Normal',1/hocDx[1],ifelse(hoc$base3dx=='2:MCI',1/hocDx[2],1/hocDx[3]))
sum(hoc$weight)
dxRates = c(.7,.2,.1)
hoc$weight = ifelse(hoc$base3dx=='1:Normal',dxrates[1]/hocDx[1],ifelse(hoc$base3dx=='2:MCI',dxRates[2]/hocDx[2],dxRates[3]/hocDx[3]))
dxRates = c(.7,.2,.1)
hoc$weight = ifelse(hoc$base3dx=='1:Normal',dxRates[1]/hocDx[1],ifelse(hoc$base3dx=='2:MCI',dxRates[2]/hocDx[2],dxRates[3]/hocDx[3]))
sum(hoc$weight)
hoc.w = with(hoc,data.frame(wtd.Ecdf(hoc,weights=weight))
hoc.w = with(hoc,data.frame(wtd.Ecdf(hoc,weights=weight)))
View(hoc.w)
plot(hoc.w$x,hoc.w$ecdf,type = 'l')
View(hoc.w)
plot(subset(hoc,base3dx=='1:Normal')$hoc)
plot(subset(hoc,base3dx=='2:MCI')$hoc)
plot(subset(hoc,base3dx=='3:MCI')$hoc)
plot(subset(hoc,base3dx=='3:MCI')$hoc)
plot(subset(hoc,base3dx=='3:AD')$hoc)
plot(hoc$hoc,col = hoc$base3dx)
range(subset(hoc,base3dx=='1:Normal')$hoc)
range(subset(hoc,base3dx=='2:MCI')$hoc)
range(subset(hoc,base3dx=='3:AD')$hoc)
View(hoc.w)
plot(hoc.w$x,1-hoc.w$ecdf,type = 'l')
View(hoc)
dc = dApril[,c('RID','viscode2','base3dx',"dx3cat","fs51date",'qcvar',"lag_fs51",'hoc','hoc0',"hpcv","etrv","etrt","ventricles","wbrain",
"wmhdate","lag_wmh","WHITMATHYP","fmridate","lag_fmri","PDMNRV","asldate","lag_asl","precuneus_asl","postcing_asl",
"dtidate","lag_dti","cing_hipp_dti","bsi3dt","lag_bsi","kmndbcbbsi3","vbsi3","hbsi3", "tbmdate","lag_tbm",
"TBMSYNSCOR","fdgdate","lag_fdg","rall","av45date","lag_av45","suvr","lag_adas","TOTAL13","lag_mmse","MMSCORE","lag_ravlt","RAVLTtotal","lag_cdr","cdrsum","lag_ecogpt","ecog_score",
"lag_ecogsp","specog_score")]
mrivar1 = c('RID','viscode2','base3dx','dx3cat',"fs51date",'qcvar',"lag_fs51",'hoc',"hpcv","etrv","etrt","ventricles","wbrain")
types = list(mrivar1,mrivar2,mrivar3,mrivar4,fmrivar,dtivar,aslvar,fdgvar,av45var,cogvar)
databreak = sapply(types,function(x){
dc[,x]
})
#### HOC ####
hoc = data.frame(databreak[1])
hoc = hoc[!is.na(hoc$hoc),]
hocDx = xtabs(~hoc$base3dx)
hocDx
hocDx = xtabs(~hoc$dx3cat)
hocDx
View(hoc)
View(subset(hoc,dx3cat==''))
subset(hoc,dx3cat=='')$dx3cat = subset(hoc,dx3cat=='')$base3dx
subset(hoc,dx3cat=='')$dx3cat
subset(hoc,dx3cat=='')$base3dx
subset(hoc,dx3cat=='')$dx3cat = subset(hoc,dx3cat=='')$base3dx
subset(hoc,dx3cat=='')$dx3cat
hoc$dx3cat[which(hoc$dx3cat=='')] = hoc$base3dx[which(hoc$dx3cat=='')]
hocDx = xtabs(~hoc$base3dx)
hocDx
hocDx = xtabs(~hoc$dx3cat)
hocDx = xtabs(~hoc$dx3cat)
hocDx
dxRates = c(.7,.2,.1)
hoc$weight = ifelse(hoc$dx3cat=='1:Normal',dxRates[1]/hocDx[1],ifelse(hoc$dx3cat=='2:MCI',dxRates[2]/hocDx[2],dxRates[3]/hocDx[3]))
hoc.w = with(hoc,data.frame(wtd.Ecdf(hoc,weights=weight)))
hoc.w = with(hoc,data.frame(wtd.Ecdf(hoc,weights=weight)))
plot(hoc.w$x,1-hoc.w$ecdf,type = 'l')
hoc.w = with(hoc,data.frame(wtd.Ecdf(hoc,weights=weight)))
plot(hoc.w$x,hoc.w$ecdf,type = 'l')
hoc.nw = with(hoc,data.frame(Ecdf(hoc,what = '1-F')))
hoc.w = with(hoc,data.frame(wtd.Ecdf(hoc,weights=weight,what = '1-F')))
hoc.w = with(hoc,data.frame(wtd.Ecdf(hoc,weights=weight)))
colnames(hoc.w) = c('hoc','hocQ')
plot(hoc.w$x,1-hoc.w$ecdf,type = 'l')
colnames(hoc.w) = c('hoc','hocQ')
plot(hoc.w$hoc,hoc.w$hocQ,type = 'l')
plot(hoc.w$hoc,1-hoc.w$hocQ,type = 'l')
dxRates = c(.6,.3,.1)
hoc$weight = ifelse(hoc$dx3cat=='1:Normal',dxRates[1]/hocDx[1],ifelse(hoc$dx3cat=='2:MCI',dxRates[2]/hocDx[2],dxRates[3]/hocDx[3]))
## ECDF ##
ADAS = data.frame(Ecdf(sample(dA$ADAS13,1729),datadensity='density'))
hoc.w = with(hoc,data.frame(wtd.Ecdf(hoc,weights=weight)))
hoc.nw = with(hoc,data.frame(Ecdf(hoc,what = '1-F')))
dxRates = c(.6,.3,.1)
hoc$weight = ifelse(hoc$dx3cat=='1:Normal',dxRates[1]/hocDx[1],ifelse(hoc$dx3cat=='2:MCI',dxRates[2]/hocDx[2],dxRates[3]/hocDx[3]))
## ECDF ##
#ADAS = data.frame(Ecdf(sample(dA$ADAS13,1729),datadensity='density'))
hoc.w = with(hoc,data.frame(wtd.Ecdf(hoc,weights=weight)))
hoc.nw = with(hoc,data.frame(Ecdf(hoc,what = '1-F')))
colnames(hoc.w) = c('hoc','hocQ')
plot(hoc.w$hoc,1-hoc.w$hocQ,type = 'l')
dxRates = c(.5,.3,.2)
hoc$weight = ifelse(hoc$dx3cat=='1:Normal',dxRates[1]/hocDx[1],ifelse(hoc$dx3cat=='2:MCI',dxRates[2]/hocDx[2],dxRates[3]/hocDx[3]))
## ECDF ##
#ADAS = data.frame(Ecdf(sample(dA$ADAS13,1729),datadensity='density'))
hoc.w = with(hoc,data.frame(wtd.Ecdf(hoc,weights=weight)))
hoc.nw = with(hoc,data.frame(Ecdf(hoc,what = '1-F')))
colnames(hoc.w) = c('hoc','hocQ')
plot(hoc.w$hoc,1-hoc.w$hocQ,type = 'l')
hoc.w = with(hoc,data.frame(wtd.Ecdf(hoc,weights=weight)))
hoc.w$S = 1-hoc.w$ecdf
colnames(hoc.w) = c('hoc','hocF','hocQ')
plot(hoc.w$hoc,hoc.w$hocQ,type = 'l')
View(hoc)
hocM = merge(hoc, hoc.w, by.x = 'hoc',by.y = 'hocQ',all.x = TRUE)
View(hoc)
View(hocM)
hocM = merge(hoc, hoc.w[,c('hoc','hocQ')], by.x = 'hoc',by.y = 'hoc',all.x = TRUE)
View(hocM)
View(hocM)
View(hoc.w)
hocM = merge(hoc, hoc.w[-1,c('hoc','hocQ')], by.x = 'hoc',by.y = 'hoc',all.x = TRUE)
View(hocM)
adas = databreak[10]
adas = data.frame(databreak[10])
View(adas)
hoc = adas[!is.na(adas$TOTAL13,]
hoc = adas[!is.na(adas$TOTAL13),]
#### HOC ####
hoc = data.frame(databreak[1])
hoc = hoc[!is.na(hoc$hoc),]
hocDx = xtabs(~hoc$dx3cat)
hoc$dx3cat[which(hoc$dx3cat=='')] = hoc$base3dx[which(hoc$dx3cat=='')]
hocDx = xtabs(~hoc$dx3cat)
hoc$weight = ifelse(hoc$dx3cat=='1:Normal',dxRates[1]/hocDx[1],ifelse(hoc$dx3cat=='2:MCI',dxRates[2]/hocDx[2],dxRates[3]/hocDx[3]))
## ECDF ##
hoc.w = with(hoc,data.frame(wtd.Ecdf(hoc,weights=weight)))
hoc.nw = with(hoc,data.frame(Ecdf(hoc,what = '1-F')))
hoc.w$S = 1-hoc.w$ecdf
colnames(hoc.w) = c('hoc','hocF','hocQ')
plot(hoc.w$hoc,hoc.w$hocQ,type = 'l')
### ADAS ###
adas = data.frame(databreak[10])
adas = adas[!is.na(adas$TOTAL13),]
View(adas)
cogvar = c('RID','viscode2','base3dx','dx3cat',"lag_adas","lag_mmse","lag_ravlt","lag_cdr","lag_ecogpt","lag_ecogsp",
"TOTAL13","MMSCORE","RAVLTtotal","cdrsum","ecog_score","specog_score")
types = list(mrivar1,mrivar2,mrivar3,mrivar4,fmrivar,dtivar,aslvar,fdgvar,av45var,cogvar)
databreak = sapply(types,function(x){
dc[,x]
})
dxRates = c(.5,.3,.2)
#### HOC ####
adas = data.frame(databreak[10])
adas = adas[!is.na(adas$TOTAL13),]
adasDx = xtabs(~adas$dx3cat)
adasDx
adas$dx3cat[which(adas$dx3cat=='')] = adas$base3dx[which(adas$dx3cat=='')]
adasDx = xtabs(~adas$dx3cat)
adasDx
adas$weight = with(adas, ifelse(dx3cat=='1:Normal',dxRates[1]/adasDx[1],ifelse(dx3cat=='2:MCI',dxRates[2]/adasDx[2],dxRates[3]/adasDx[3]))
)
View(adas)
adas.w = with(adas,data.frame(wtd.Ecdf(TOTAL13,weights=weight)))
colnames(adas.w) = c('adas','adasQ')
plot(adas.w$adas,adas.w$adasQ,type = 'l')
adas.w = with(adas,data.frame(wtd.Ecdf(TOTAL13,weights=weight)))
View(adas.w)
adas.w$S = 1-hoc.w$ecdf
colnames(adas.w) = c('adas','adasQ')
plot(adas.w$adas,adas.w$adasQ,type = 'l')
adasM = merge(adas, adas.w[-1,], by.x = 'TOTAL13',by.y = 'adas',all.x = TRUE)
View(adasM)
View(adasM)
hocM = with(hocM,hocM[order(RID,lag_fs51)]
)
hocM = with(hocM,hocM[order(RID,lag_fs51),])
adasM = with(adasM,adasM[order(RID,lag_adas),])
View(adasM)
rates = function(dflong,id='RID',var='variable'){
unique(ddply(dflong,c(id,var),summarise,
lev = ifelse(try(lm(value~time))=='try-error',NA,lm(value~time)$coefficients[1])
slope = ifelse(try(lm(value~time))=='try-error',NA,lm(value~time)$coefficients[2])))}
LevSlop = function(dflong,id='RID',var='variable'){
unique(ddply(dflong,c(id,var),summarise,
lev = ifelse(try(lm(value~time))=='try-error',NA,lm(value~time)$coefficients[1])
slope = ifelse(try(lm(value~time))=='try-error',NA,lm(value~time)$coefficients[2])))}
LevSlop = function(dflong,id='RID',var='variable'){
unique(ddply(dflong,c(id,var),summarise,
lev = ifelse(try(lm(value~time))=='try-error',NA,lm(value~time)$coefficients[1]),
slope = ifelse(try(lm(value~time))=='try-error',NA,lm(value~time)$coefficients[2])))}
hocM = with(hocM,hocM[order(RID,lag_fs51),c('RID','hoc','hocQ','lag_fs51')])
adasM = with(adasM,adasM[order(RID,lag_adas),c('RID','TOTAL13','adasQ','lag_adas')])
View(adasM)
hocM$type = 'hoc'
adasM$type = 'adas'
colnames(hocM)=colnames(adasM) = c('RID','raw','quant','type')### Create frame of variables ###
markers = rbind(hocM,adasM)
View(markers)
colnames(hocM)=colnames(adasM) = c('RID','raw','quant','time','type')
markers = rbind(hocM,adasM)
View(markers)
markers = with(markers,markers[order(RID,type,time),]
)
View(markers)
LevSlop = function(dflong,id='RID',var='type'){
unique(ddply(dflong,c(id,var),summarise,
lev.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[1]),
slope.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[2]),
lev.r = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[1]),
slope.r = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[2])))}
LevSlope(markers)
LevSlop = function(dflong,id='RID',var='type'){
unique(ddply(dflong,c(id,var),summarise,
lev.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[1]),
slope.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[2]),
lev.r = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[1]),
slope.r = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[2])))}
LevSlope(markers)
LevSlop(markers)
View(markers)
View(markers)
LevSlop = function(dflong,id='RID',var='type'){
unique(ddply(dflong,c(id,var),summarise,
lev.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[1])))}
LevSlop(markers)
a = subset(markers,type = 'adas')
lm(raw~time,data = a)
lm(quant~time,data = a)
a = subset(markers,type = 'hoc')
lm(quant~time,data = a)
lm(raw~time,data = a)
lm(quant~time,data = a)
a = subset(markers,type == 'hoc')
lm(raw~time,a)
lm(quant~time,a)
a = subset(markers,type == 'adas')
lm(quant~time,a)
lm(raw~time,a)
LevSlop = function(dflong,id='RID',var='type'){
unique(ddply(dflong,c(id,var),summarise,
lev.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[1]),
slope.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[2]),
lev.q = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[1]),
slope.q = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[2])))}
LevSlop(markers)
lm(raw~time,a)$coefficients[1]
lm(raw~time,a)$coefficients[1]
a = ddply(dflong,c('RID','type'),summarise,
lev.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[1]),
slope.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[2]),
lev.q = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[1]),
slope.q = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[2]))
a = ddply(markers,c('RID','type'),summarise,
lev.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[1]),
slope.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[2]),
lev.q = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[1]),
slope.q = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[2]))
View(markers)
a1 = subset(markers,RID=='2002')
ddply(a1,c('type'),summarise,
lev.r = lm(raw~time)$coefficients[1])
ddply(a1,c('type'),summarise,
lev.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[1]))
ddply(a1,c('type'),summarise,
lev.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[1]),
slope.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[2]),
lev.q = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[1]),
slope.q = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[2]))
unique(ddply(a1,c('type'),summarise,
lev.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[1]),
slope.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[2]),
lev.q = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[1]),
slope.q = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[2])))
872/7
################################################################################
######    Syndrome Classifiation
######	  By: Teresa Filshtein
######	  Date: April 22, 2016
######	  Modified:
######    EDITED BY:
################################################################################
options(stringsAsFactors = FALSE)
library(date)
library(plyr)
library(xtable)
library(corrplot)
setwd('~/Documents/Davis2015-2016/ADNIDanielle/Data/DataApril')
dApril = read.csv("alldata_go2_20160419.csv",header=T)
nlids=with(dApril, unique(RID[base3dx=='1:Normal']))
mciids=with(dApril, unique(RID[base3dx=='2:MCI']))
adids=with(dApril, unique(RID[base3dx=='3:AD']))
`%ni%` <- Negate(`%in%`)
################################################################################
setwd("~/Documents/Dissertation/R_Dissertation/Syndrome")
dc = dApril[,c('RID','viscode2','base3dx',"dx3cat","fs51date",'qcvar',"lag_fs51",'hoc','hoc0',"hpcv","etrv","etrt","ventricles","wbrain",
"wmhdate","lag_wmh","WHITMATHYP","fmridate","lag_fmri","PDMNRV","asldate","lag_asl","precuneus_asl","postcing_asl",
"dtidate","lag_dti","cing_hipp_dti","bsi3dt","lag_bsi","kmndbcbbsi3","vbsi3","hbsi3", "tbmdate","lag_tbm",
"TBMSYNSCOR","fdgdate","lag_fdg","rall","av45date","lag_av45","suvr","lag_adas","TOTAL13","lag_mmse","MMSCORE","lag_ravlt","RAVLTtotal","lag_cdr","cdrsum","lag_ecogpt","ecog_score",
"lag_ecogsp","specog_score")]
mrivar1 = c('RID','viscode2','base3dx','dx3cat',"fs51date",'qcvar',"lag_fs51",'hoc',"hpcv","etrv","etrt","ventricles","wbrain")
mrivar2 = c('RID','viscode2','base3dx',"wmhdate",'qcvar',"lag_wmh","WHITMATHYP")
mrivar3 = c('RID','viscode2','base3dx',"bsi3dt","lag_bsi","kmndbcbbsi3","vbsi3","hbsi3")
mrivar4 = c('RID','viscode2','base3dx',"tbmdate","lag_tbm",
"TBMSYNSCOR")
fmrivar = c('RID','viscode2','base3dx',"lag_fmri","PDMNRV")
dtivar = c('RID','viscode2','base3dx',"dtidate","lag_dti","cing_hipp_dti")
aslvar = c('RID','viscode2','base3dx',"asldate","lag_asl","precuneus_asl","postcing_asl")
fdgvar =c('RID','viscode2','base3dx',"lag_fdg","rall")
av45var = c('RID','viscode2','base3dx',"av45date","lag_av45","suvr")
cogvar = c('RID','viscode2','base3dx','dx3cat',"lag_adas","lag_mmse","lag_ravlt","lag_cdr","lag_ecogpt","lag_ecogsp",
"TOTAL13","MMSCORE","RAVLTtotal","cdrsum","ecog_score","specog_score")
types = list(mrivar1,mrivar2,mrivar3,mrivar4,fmrivar,dtivar,aslvar,fdgvar,av45var,cogvar)
databreak = sapply(types,function(x){
dc[,x]
})
dxRates = c(.5,.3,.2)
#### HOC ####
hoc = data.frame(databreak[1])
hoc = hoc[!is.na(hoc$hoc),]
hocDx = xtabs(~hoc$dx3cat)
hoc$dx3cat[which(hoc$dx3cat=='')] = hoc$base3dx[which(hoc$dx3cat=='')]
hocDx = xtabs(~hoc$dx3cat)
hoc$weight = ifelse(hoc$dx3cat=='1:Normal',dxRates[1]/hocDx[1],ifelse(hoc$dx3cat=='2:MCI',dxRates[2]/hocDx[2],dxRates[3]/hocDx[3]))
## ECDF ##
hoc.w = with(hoc,data.frame(wtd.Ecdf(hoc,weights=weight)))
hoc.nw = with(hoc,data.frame(Ecdf(hoc,what = '1-F')))
hoc.w$S = 1-hoc.w$ecdf
colnames(hoc.w) = c('hoc','hocF','hocQ')
plot(hoc.w$hoc,hoc.w$hocQ,type = 'l')
### ADAS ###
adas = data.frame(databreak[10])
adas = adas[!is.na(adas$TOTAL13),]
adasDx = xtabs(~adas$dx3cat)
adas$dx3cat[which(adas$dx3cat=='')] = adas$base3dx[which(adas$dx3cat=='')]
adasDx = xtabs(~adas$dx3cat)
adas$weight = with(adas, ifelse(dx3cat=='1:Normal',dxRates[1]/adasDx[1],
ifelse(dx3cat=='2:MCI',dxRates[2]/adasDx[2],dxRates[3]/adasDx[3])))
## ECDF ##
adas.w = with(adas,data.frame(wtd.Ecdf(TOTAL13,weights=weight)))
#adas.nw = with(hoc,data.frame(Ecdf(hoc,what = '1-F')))
colnames(adas.w) = c('adas','adasQ')
plot(adas.w$adas,adas.w$adasQ,type = 'l')
####
hocM = merge(hoc, hoc.w[-1,c('hoc','hocQ')], by.x = 'hoc',by.y = 'hoc',all.x = TRUE)
adasM = merge(adas, adas.w[-1,], by.x = 'TOTAL13',by.y = 'adas',all.x = TRUE)
hocM = with(hocM,hocM[order(RID,lag_fs51),c('RID','hoc','hocQ','lag_fs51')])
adasM = with(adasM,adasM[order(RID,lag_adas),c('RID','TOTAL13','adasQ','lag_adas')])
hocM$type = 'hoc'
adasM$type = 'adas'
colnames(hocM)=colnames(adasM) = c('RID','raw','quant','time','type')
### Create frame of variables ###
markers = rbind(hocM,adasM)
markers = with(markers,markers[order(RID,type,time),])
## Levels and Slopes ##
View(markers)
unique(
a = ddply(markers,c('RID','type'),summarise,
lev.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[1]),
slope.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[2]),
lev.q = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[1]),
slope.q = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[2]))
)
View(markers)
a = ddply(markers,c('RID'),summarise,
lev.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[1]),
slope.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[2]),
lev.q = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[1]),
slope.q = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[2]))
)
View(a)
unique(
a = ddply(markers,c('type','RID'),summarise,
lev.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[1]),
slope.r = ifelse(try(lm(raw~time))=='try-error',NA,lm(raw~time)$coefficients[2]),
lev.q = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[1]),
slope.q = ifelse(try(lm(quant~time))=='try-error',NA,lm(quant~time)$coefficients[2]))
)
a = ddply(markers,c('type','RID'),summarize,
lev.r = lm(raw~time)$coefficients[1])
a = ddply(markers,c('type','RID'),summarize,lev.r = lm(raw~time)$coefficients[1])
a = ddply(markers,by = c('type','RID'),summarize,lev.r = lm(raw~time)$coefficients[1])
a = ddply(markers,by = c('type','RID'),summarise,lev.r = lm(raw~time)$coefficients[1])
a = ddply(markers,c('type','RID'),summarise,lev.r = lm(raw~time)$coefficients[1])
View(markers)
a = ddply(markers,c('RID','type'),summarise,lev.r = lm(raw~time)$coefficients[1])
LevSlop = function(dflong){
vars = unique(dflong$type)
id = unique(dflong$RID)
sapply(vars,function(x){
sapply(id,lev.r = lm(raw~time,data = dflong)$coefficients[1])
})}
LevSlop(markers)
LevSlop = function(dflong){
vars = unique(dflong$type)
id = unique(dflong$RID)
sapply(vars,function(x){
df = subset(dflong,type==x)
sapply(id,function(y){
df1 = subset(df,RID==id)
lm(raw~time,data = df1)$coefficients[1]})
})}
LevSlop(markers)
class(markers$type)
class(markers$RID)
model <- function(x){
fit1 <- lm(raw ~ time, data=x)
fit2 = lm(quant ~ time, data=x)
data.frame(rL=coef(fit1)[[1]], rS=coef(fit1)[[2]],qL=coef(fit2)[[1]], qS=coef(fit2)[[2]])
}
ddply(markers,.(RID,type),model)
model(subset(markers,RID=='2002',type=='adas'))
markers$RID = as.character(markers$RID)
model <- function(x){
fit1 <- lm(raw ~ time, data=x)
fit2 = lm(quant ~ time, data=x)
data.frame(rL=coef(fit1)[[1]], rS=coef(fit1)[[2]],qL=coef(fit2)[[1]], qS=coef(fit2)[[2]])
}
model(subset(markers,RID=='2002',type=='adas'))
a = subset(markers,RID=='2002',type=='adas')
View(a)
a = subset(markers,RID=='2002'&type=='adas')
View(a)
model(subset(markers,RID=='2002',type=='adas'))
model(subset(markers,RID=='2002'&type=='adas'))
ddply(markers,.(RID,type),model)
ddply(markers,.(type,RID),model)
ddply(markers,.(type,RID),model)
ddply(subset(markers,type =='adas'),.(RID),model)
subset(markers,type =='adas')
adasM = ddply(subset(markers,type =='adas'),.(RID),model)
adasM = subset(markers,type=='adas')
View(dApril)
View(adasM)
class(adasM$raw)
class(adasM$quant)
class(adasM$time)
class(adasM$type)
class(adasM$RID)
M1 = ddply(adasM,.(RID),model)
View(adas)
View(adasM)
